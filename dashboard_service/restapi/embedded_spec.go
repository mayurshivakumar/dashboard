// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Dashboard",
    "title": "Dashboard Service",
    "version": "1.0.0.0"
  },
  "host": "localhost:9000",
  "basePath": "/dashboard/v1",
  "paths": {
    "/healthz": {
      "get": {
        "security": [],
        "tags": [
          "health-checks"
        ],
        "operationId": "HealthCheck",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          }
        }
      }
    },
    "/portfolio": {
      "get": {
        "tags": [
          "dashboard-service"
        ],
        "summary": "Get portfolio",
        "operationId": "GetPortfolio",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Portfolio"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          }
        }
      }
    },
    "/weather": {
      "get": {
        "tags": [
          "dashboard-service"
        ],
        "summary": "Get weather",
        "operationId": "GetHourlyWeather",
        "parameters": [
          {
            "type": "string",
            "description": "weather for the state",
            "name": "state",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "weather for the city",
            "name": "city",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Hourly"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Hourly": {
      "type": "object",
      "properties": {
        "condition": {
          "type": "string"
        },
        "feelsLike": {
          "type": "string"
        },
        "snow": {
          "type": "string"
        },
        "temperature": {
          "type": "string"
        },
        "time": {
          "type": "string"
        }
      }
    },
    "Portfolio": {
      "type": "object",
      "properties": {
        "loss": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string"
        },
        "pricePerShareBought": {
          "type": "number",
          "format": "double"
        },
        "pricePerShareNow": {
          "type": "number",
          "format": "double"
        },
        "profit": {
          "type": "number",
          "format": "double"
        },
        "sharesHeld": {
          "type": "number",
          "format": "double"
        },
        "symbol": {
          "type": "string"
        },
        "totalValueBought": {
          "type": "number",
          "format": "double"
        },
        "totalValueNow": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "SimpleResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "API to query dashboard information",
      "name": "dashboard-service"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Dashboard",
    "title": "Dashboard Service",
    "version": "1.0.0.0"
  },
  "host": "localhost:9000",
  "basePath": "/dashboard/v1",
  "paths": {
    "/healthz": {
      "get": {
        "security": [],
        "tags": [
          "health-checks"
        ],
        "operationId": "HealthCheck",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          }
        }
      }
    },
    "/portfolio": {
      "get": {
        "tags": [
          "dashboard-service"
        ],
        "summary": "Get portfolio",
        "operationId": "GetPortfolio",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Portfolio"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          }
        }
      }
    },
    "/weather": {
      "get": {
        "tags": [
          "dashboard-service"
        ],
        "summary": "Get weather",
        "operationId": "GetHourlyWeather",
        "parameters": [
          {
            "type": "string",
            "description": "weather for the state",
            "name": "state",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "weather for the city",
            "name": "city",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Hourly"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/SimpleResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Hourly": {
      "type": "object",
      "properties": {
        "condition": {
          "type": "string"
        },
        "feelsLike": {
          "type": "string"
        },
        "snow": {
          "type": "string"
        },
        "temperature": {
          "type": "string"
        },
        "time": {
          "type": "string"
        }
      }
    },
    "Portfolio": {
      "type": "object",
      "properties": {
        "loss": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string"
        },
        "pricePerShareBought": {
          "type": "number",
          "format": "double"
        },
        "pricePerShareNow": {
          "type": "number",
          "format": "double"
        },
        "profit": {
          "type": "number",
          "format": "double"
        },
        "sharesHeld": {
          "type": "number",
          "format": "double"
        },
        "symbol": {
          "type": "string"
        },
        "totalValueBought": {
          "type": "number",
          "format": "double"
        },
        "totalValueNow": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "SimpleResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "API to query dashboard information",
      "name": "dashboard-service"
    }
  ]
}`))
}
